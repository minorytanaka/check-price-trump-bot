import asyncio
import json
import random

import websockets
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

from settings import BOT_TOKEN, SUBSCRIBED_CHAT_ID


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_notified_price = None  # –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
current_price = None  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
subscribed_chat_id = SUBSCRIBED_CHAT_ID  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π


async def on_message(websocket, bot):
    global last_notified_price, current_price
    async for message in websocket:
        data = json.loads(message)
        price_str = data.get("p")

        if not price_str:
            continue

        new_price = float(price_str)
        current_price = new_price  # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if last_notified_price is None:
            last_notified_price = new_price
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        price_diff = abs(new_price - last_notified_price)

        if price_diff >= 0.1 and subscribed_chat_id:
            direction = (
                "üü¢ –í–ó–õ–ï–¢–ï–õ–ê" if new_price > last_notified_price else "üî™ –†–£–•–ù–£–õ–ê"
            )

            await bot.send_message(
                subscribed_chat_id,
                f"üö® {direction} –ù–ê {price_diff:.2f}$!\n"
                f"üëâ –¢–µ–∫—É—â–∞—è: ${new_price:.2f}\n"
                f"‚è≥ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ä–æ–≥: ${last_notified_price:.2f}\n"
                f"#{'TO_THE_MOON' if direction == 'üü¢ –í–ó–õ–ï–¢–ï–õ–ê' else 'DUMPSTER_FIRE'}",
            )

            last_notified_price = new_price


async def subscribe(bot):
    uri = "wss://fstream.binance.com/ws/trumpusdt@aggTrade"
    while True:
        try:
            async with websockets.connect(uri) as websocket:
                await websocket.send(
                    json.dumps(
                        {
                            "method": "SUBSCRIBE",
                            "params": ["trumpusdt@aggTrade"],
                            "id": 1,
                        }
                    )
                )
                await on_message(websocket, bot)
        except Exception as e:
            print(f"Connection error: {e}")
            await asyncio.sleep(5)


async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    # –ö–æ–º–∞–Ω–¥–∞ /p - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    @dp.message(Command("p"))
    async def price_cmd(message: Message):
        if current_price is not None:
            await message.answer(
                f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ TRUMP: ${current_price:.4f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: "
                f"{'üü¢ +' if current_price >= last_notified_price else 'üî¥ '}"
                f"{(current_price - last_notified_price):.2f}$"
            )
        else:
            await message.answer("‚è≥ –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã...")

    await asyncio.gather(dp.start_polling(bot), subscribe(bot))


if __name__ == "__main__":
    asyncio.run(main())
